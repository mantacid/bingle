;;;; TRY TO MAKE IT 30PX TALL
;; upon creating a tab, it is assigned a UUID from the output of the command `uuidgen`
;;theUUID of the most recently focused tab is written to a temp file, which a conditional compares itself against to allow for tab focus classes

(defwidget newTab []
  (button :class "new tab"
          :width WIN_FRAME_H
          :height WIN_FRAME_H
          ;:onclick ""
          ;:onnrightclick ""
          :hexpand false
          :halign "start"
          :vexpand true
    (icon :name "value-increase-symbolic"
          :halign "start"
          :hexpand false
    )
  )
)

(defwidget tab [tabLabel ?PID ?appSessionYuck tabIcon ?tabUUID ?winUUID]
    (eventbox :class "tab ${matches(tabUUID, LAST_FOCUSED_TAB_UUID) ? 'focused' : ''}"
              :hexpand true
              :halign "fill"
              :onclick "${EWW_EXECUTABLE} -c ${EWW_CONFIG_DIR} update LAST_FOCUSED_TAB_UUID='${tabUUID}'" ;;also execute updating the parent window content to the value of the
              ;:onhover ""
              ;:onhoverlost ""

              ;:dragtype "text"
              ;:dragvalue "{tab: '${tabUUID}', win: '${winUUID}'}" ;; window uses these to find the json for the tab and add it to the current window
    (box :space-evenly false
         :spacing "3px"
         :height WIN_FRAME_H
      (box :class "spacer"
        (icon :name tabIcon
              :class "tab {matches(tabUUID, LAST_FOCUSED_TAB_UUID) ? 'focused' : ''}"
              :halign "end"
              :hexpand false
        )
      )

      (label :class "tab"
             :text {strlength(tabLabel)>12 ? "${search(tabLabel, '.{0,17}')[0]}..." : "${search(tabLabel, '.{0,16}')[0]}"}
             :justify "left"
             :hexpand true
             :halign "start"
      )

      (button :class "tab close"
              :halign "end"
              :hexpand "false"
              :vexpand false
              ;:onclick ""
        (icon :name "window-close-symbolic"
              :class "close"
        )
      )
    )
  )
)

