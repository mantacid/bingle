(defvar cmenuInstanceLiteral '(optionInstance :icon entry.icon :labl entry.labl :yuck entry.yuck)')
(defvar cmenuSeperatorLiteral '(seperator)')

;;;;; define a typical context menu item ;;;;;

(defwidget optionInstance [labl icon ?cmnd yuck]
  (eventbox :class {''=~ icon && ''=~ labl && ''=~ yuck ? "instance seperator" : "instance"}
            :hexpand true
            :vexpand false
            :halign "fill"
            :valign "start"
            :active {''=~ icon && ''=~ labl && ''=~ yuck ? false : true}

        ;;;;;-- EVENTS --;;;;;
            ;:onclick ""
            ;:onrightclick ""
            ;:onmiddleclick ""

            ;:onscroll ""

            ;:onhover ""
            ;:onhoverlost ""

            ;:dragtype ""
            ;:dragvalue ""
            ;:ondropped ""

    (box :class "context option"
         :orientation "h"
         :space-evenly false

      (icon :class "option"
            :name icon
            :visible {'' =~ icon ? false : true}
      )
      (label :class "option"
             :yalign 0.5
             :justify "left"
             :visible {'' =~ labl ? false : true}
             :limit-width {'' =~ labl ? 0 : 100}
             :text {labl ?: ""}
      )
      ;; RENDER ADDITIONAL YUCK. be sure to define styles for any element that could be in here.
      (literal :content yuck
               :halign "end"
               :valign "center"
               :hexpand true
               :visible {'' =~ yuck ? false : true}
      )
    )
  )
)

;;;;; define menu holder ;;;;;
;;will instance data from json provided by target element.

;; menu data, hardcoded for now.
(defpoll cmenuJSON_TEST :interval "1000s" `cat /home/bingle/github/bingle/yuck/util/contextBaseTest.json`)

(defwidget mainContext [?currentFocus ?menuData ?cmenuJSON]
  (eventbox :class "context"
            :active true
            :halign "fill"
            :vexpand true
            :onmiddleclick "${EWW_EXECUTABLE} -c ${EWW_CONFIG_DIR} close CONTEXT" ;;for testing purposes
    (box :class "context menu"
         :orientation "v"
         :space-evenly false
         :hexpand true
      (for entry in {cmenuJSON.options ?: "{}"}
        (optionInstance :icon "${entry.icon ?: ''}"
                        :labl "${entry.labl ?: ''}"
                        :yuck "${entry.yuck ?: ''}"
        )
      )
    )
  )
)

;;;;; define the window ;;;;;

(defwindow CONTEXT :stacking "bg"
                   :wm-ignore true
                   :geometry (geometry :x "50%"
                                       :y "50%"
                                       :width "200px"
                                       :anchor "top left"
                             )
  (mainContext :cmenuJSON cmenuJSON_TEST)
)
